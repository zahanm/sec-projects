Zoobar.org Vulnerability Fixes

Prevented Running Arbitrary Javascript on the Search Page
There is no direct functionality benefit created by eval'ing the class, so I just stripped it out by removing the eval.
This solution was later superseded by the final solution below.
ORIGINAL ATTACKS: (e)

Prevented Setting Arbitrary HTML on the Search Page
First Solution: Set the textContent/innerText property of the nodes rather than innerHTML. Safer.
Final Solution: Let Ruby set the search parameters using haml to auto-escape input.
ORIGINAL ATTACKS: (a) and (e)

Move logo to public/
It is an easy to access private resource that is not subject to cross-origin restrictions. Safer to leave as a static file (that it is).
FUNCTIONALITY CHANGE: logo is made public
ORIGINAL ATTACKS: (d)

Prevented Using Logo to Hijack Login
Access logo through randomly generated path that is set at login.
So it is accessed through a path like '/secret/ivvzkyjwti.png'
FUNCTIONALITY RESTORED: logo is private again
ORIGINAL ATTACKS: (d)

CSRF protection
When rendering a form, include random 20 character sequence to deter cross site request forgery.
Used for all POST and PUT calls that change information server side.
ORIGINAL ATTACKS: (b) and (c)

SQL Injection
Changed user login Ruby logic to use parameterized SQL from ActiveRecord framework rather than self-implemented sanitization.
ORIGINAL ATTACKS: (c)

Removed all Javascript deps
No need for zoobars.js or jQuery.
Render the html consitently in server-side HAML templating language.
This change decreases attack surface area from javascript in general.

======

CHOSE NOT TO IMPLEMENT:

Check Referrer Header
In this forum post https://courseware.stanford.edu/pg/forum/question/301279/no-referer-field we are told that we should support browsers that strip out the referrer field, in which case we decided that our csrf protection was already strong enough without this additional check that we'd have to waive anyhow.
